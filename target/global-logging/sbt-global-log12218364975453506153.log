[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\Jarvis\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\Jarvis\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.6.1 (Oracle Corporation Java 13.0.1)
[debug]       Load.loadUnit: plugins took 93.9406ms
[debug]       Load.loadUnit: defsScala took 0.2328ms
[debug] [Loading] Scanning directory C:\Users\Jarvis\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Jarvis\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 16.3793 ms
[debug]           Load.resolveProject(global-plugins) took 46.9517ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\Jarvis\.sbt\1.0\plugins, plugins: List(<none>))) took 113.7278ms
[debug] [Loading] Done in C:\Users\Jarvis\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 151.6301ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.196ms
[debug]     Load.loadUnit(file:/C:/Users/Jarvis/.sbt/1.0/plugins/, ...) took 254.4069ms
[debug]   Load.apply: load took 421.7562ms
[debug]   Load.apply: resolveProjects took 6.2237ms
[debug]   Load.apply: finalTransforms took 87.3291ms
[debug]   Load.apply: config.delegates took 21.6439ms
[debug]   Load.apply: Def.make(settings)... took 754.4131ms
[debug]   Load.apply: structureIndex took 149.8861ms
[debug]   Load.apply: mkStreams took 2.0042ms
[info] loading global plugins from C:\Users\Jarvis\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 7615.5346ms
[debug]           Load.loadUnit: plugins took 34.2221ms
[debug]           Load.loadUnit: defsScala took 0.0045ms
[debug] [Loading] Scanning directory C:\Users\Jarvis\Documents\Cours\ESGI\Apache Spark\projet_spark\project
[debug]             Load.loadUnit: mkEval took 8.1537ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Jarvis\Documents\Cours\ESGI\Apache Spark\projet_spark\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.366 ms
[info] loading settings for project projet_spark-build from idea.sbt ...
[debug]               Load.resolveProject(projet_spark-build) took 2.4463ms
[debug]             Load.loadTransitive: finalizeProject(Project(id projet_spark-build, base: C:\Users\Jarvis\Documents\Cours\ESGI\Apache Spark\projet_spark\project, plugins: List(<none>))) took 5.2827ms
[debug] [Loading] Done in C:\Users\Jarvis\Documents\Cours\ESGI\Apache Spark\projet_spark\project, returning: (projet_spark-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 2673.0689ms
[debug]           Load.loadUnit: cleanEvalClasses took 5.663ms
[debug]         Load.loadUnit(file:/C:/Users/Jarvis/Documents/Cours/ESGI/Apache%20Spark/projet_spark/project/, ...) took 2714.0631ms
[debug]       Load.apply: load took 2715.9472ms
[debug]       Load.apply: resolveProjects took 0.1144ms
[debug]       Load.apply: finalTransforms took 11.8361ms
[debug]       Load.apply: config.delegates took 0.3736ms
[debug]       Load.apply: Def.make(settings)... took 132.5826ms
[debug]       Load.apply: structureIndex took 34.9395ms
[debug]       Load.apply: mkStreams took 0.005ms
[info] loading project definition from C:\Users\Jarvis\Documents\Cours\ESGI\Apache Spark\projet_spark\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 3687.3015ms
[debug]     Load.loadUnit: defsScala took 0.0027ms
[debug] [Loading] Scanning directory C:\Users\Jarvis\Documents\Cours\ESGI\Apache Spark\projet_spark
[debug]       Load.loadUnit: mkEval took 0.2185ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Jarvis\Documents\Cours\ESGI\Apache Spark\projet_spark, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.3742 ms
[info] loading settings for project projet_spark from build.sbt ...
[debug]         Load.resolveProject(projet_spark) took 27.736ms
[debug]       Load.loadTransitive: finalizeProject(Project(id projet_spark, base: C:\Users\Jarvis\Documents\Cours\ESGI\Apache Spark\projet_spark, plugins: List(<none>))) took 31.2478ms
[debug] [Loading] Done in C:\Users\Jarvis\Documents\Cours\ESGI\Apache Spark\projet_spark, returning: (projet_spark)
[debug]     Load.loadUnit: loadedProjectsRaw took 1473.4912ms
[debug]     Load.loadUnit: cleanEvalClasses took 30.687ms
[debug]   Load.loadUnit(file:/C:/Users/Jarvis/Documents/Cours/ESGI/Apache%20Spark/projet_spark/, ...) took 5192.3844ms
[debug] Load.apply: load took 5194.5404ms
[debug] Load.apply: resolveProjects took 0.1116ms
[debug] Load.apply: finalTransforms took 24.1296ms
[debug] Load.apply: config.delegates took 0.3575ms
[debug] Load.apply: Def.make(settings)... took 85.2455ms
[debug] Load.apply: structureIndex took 24.5123ms
[debug] Load.apply: mkStreams took 0.0021ms
[info] set current project to spark_project (in build file:/C:/Users/Jarvis/Documents/Cours/ESGI/Apache%20Spark/projet_spark/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 55622 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 55622, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to spark_project (in build file:/C:/Users/Jarvis/Documents/Cours/ESGI/Apache%20Spark/projet_spark/)
[debug] > Exec(idea-shell, None, None)
